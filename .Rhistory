n_treat = 2, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(2400, -1200),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 0, # among mouse variance
sigma_ss = 800, # among technical reps within mouse but really this is among mice
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
setnames(fake_data, "sim_1", "csa") # cross-sectional area
fake_data[, genotype := ifelse(treatment == "Cn", "Control", "mKO")]
fake_data[, genotype := factor(genotype, levels = c("Control", "mKO"))]
m1 <- lm(csa ~ genotype, data = fake_data)
m1_emm <- emmeans(m1, specs = "genotype")
m1_pairs <- contrast(m1_emm,
method = "revpairwise")
ggplot_the_response(m1, m1_emm, m1_pairs)
outfile_name <- "crd2x0-gamma.xlsx"
outpath <- here(data_folder, outfile_name)
y_cols <- c("mouse", "genotype", "csa")
write_xlsx(fake_data[, .SD, .SDcols = y_cols], outpath)
seed <- 0
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
family = "gamma",
n_treat = 2, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(2400, -1000),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 0, # among mouse variance
sigma_ss = 800, # among technical reps within mouse but really this is among mice
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
setnames(fake_data, "sim_1", "csa") # cross-sectional area
fake_data[, genotype := ifelse(treatment == "Cn", "Control", "mKO")]
fake_data[, genotype := factor(genotype, levels = c("Control", "mKO"))]
m1 <- lm(csa ~ genotype, data = fake_data)
m1_emm <- emmeans(m1, specs = "genotype")
m1_pairs <- contrast(m1_emm,
method = "revpairwise")
ggplot_the_response(m1, m1_emm, m1_pairs)
outfile_name <- "crd2x0-gamma.xlsx"
outpath <- here(data_folder, outfile_name)
y_cols <- c("mouse", "genotype", "csa")
write_xlsx(fake_data[, .SD, .SDcols = y_cols], outpath)
seed <- 2
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
family = "gamma",
n_treat = 2, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(2400, -1000),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 0, # among mouse variance
sigma_ss = 800, # among technical reps within mouse but really this is among mice
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
setnames(fake_data, "sim_1", "csa") # cross-sectional area
fake_data[, genotype := ifelse(treatment == "Cn", "Control", "mKO")]
fake_data[, genotype := factor(genotype, levels = c("Control", "mKO"))]
m1 <- lm(csa ~ genotype, data = fake_data)
m1_emm <- emmeans(m1, specs = "genotype")
m1_pairs <- contrast(m1_emm,
method = "revpairwise")
ggplot_the_response(m1, m1_emm, m1_pairs)
outfile_name <- "crd2x0-gamma.xlsx"
outpath <- here(data_folder, outfile_name)
y_cols <- c("mouse", "genotype", "csa")
write_xlsx(fake_data[, .SD, .SDcols = y_cols], outpath)
data_folder
outpath
knitr::opts_chunk$set(echo = TRUE)
# wrangling packages
library(here) # here makes a project transportable
library(janitor) # clean_names
library(readxl) # read excel, duh!
library(writexl) # read excel, duh!
library(data.table) # magical data frames
library(magrittr) # pipes
library(stringr) # string functions
library(forcats) # factor functions
# analysis packages
library(emmeans) # the workhorse for inference
library(nlme) # gls and some lmm
library(lme4) # linear mixed models
library(lmerTest) # linear mixed model inference
library(afex) # ANOVA linear models
library(glmmTMB) # generalized linear models
library(MASS) # negative binomial and some other functions
library(car) # model checking and ANOVA
library(DHARMa) # model checking
library(mvtnorm)
library(MHTdiscrete) # sidak
# graphing packages
library(ggsci) # color palettes
library(ggpubr) # publication quality plots
library(ggforce) # better jitter
library(cowplot) # combine plots
library(knitr) # kable tables
library(kableExtra) # kable_styling tables
# ggplot_the_model.R packages not loaded above
library(insight)
library(lazyWeave)
# use here from the here package
here <- here::here
# use clean_names from the janitor package
clean_names <- janitor::clean_names
# use transpose from data.table
transpose <- data.table::transpose
# load functions used by this text written by me
# ggplot_the_model.R needs to be in the folder "R"
# if you didn't download this and add to your R folder in your
# project, then this line will cause an error
source_path <- here("R", "ggplot_the_model.R")
source(source_path)
data_folder <- "data"
image_folder <- "images"
output_folder <- "output"
seed <- 2
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
family = "gamma",
n_treat = 2, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(2400, -1000),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 0, # among mouse variance
sigma_ss = 800, # among technical reps within mouse but really this is among mice
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
# this is the official simulator function. Any changes should be copied into ggplot_the_model.Rmd for compilation
simulator <- function(
seed_i = 1,
n_sim = 1,
family = "gaussian",
n_treat = 3, # tau
n_block = 6, # beta_1, number of (nested) blocks
n_rep = 1, # eta, number of experimental replicates
n_ss = 1, # epsilon, number of subsamples within each block:treatment.
n_exp = 1, # number of experiments
design = "rcbd", # if rcbd, then all treatments within block. If "pseudoreplicated", then single treatment per block and all replicates within block are subsamples.
unique_id = TRUE, # give unique ids to values of all factors
treatment_crossed_with = "block", # not used. alternat is "rep". If "block" then treatment is applied to block and reps across block:treatment differ. If "rep" then treatment is applied to subblock (the replicate) and reps across block:treatment are same. This makes "rep" a block nested within "block"
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(10, 0, 0), # effects
gamma = c(0.5, 0.5), # sd of random intercept and slopes for non-ref
rho = c(0.6, 0.6, 0.6), # r between random intercept and slopes
sigma_exp = 0, # sd among experiments
sigma_exp.block = 1, # sd among exp:block (or block if n_exp = 1)
sigma_exp.treat = 0, # sd among exp:treat
sigma_exp.block.treat = c(0), # sd among exp:block:treat, this can be a vector
# (or block:treat if n_exp = 1). If not a vector, then vector created with value for each treatment. This creates heterogeneity of correlation
sigma_rep = 0, # sd among experimental replicates of treatment:block
sigma_ss = 0.3, # sd among subsamples within replication of treatment:block. This is just sigma
equal_n = TRUE,
exp_name = "exp",
block_name = "block",
rep_name = "rep",
ss_name = "ss"
){
# 1. default beta is for n_treat = 2. If > 2 then default adds 0 for each added level
# 2. default sigma is 1 for all treatment levels. Can specify heterogeneity by sending vector with sigma for each level of treatment
# 3. if correlated_slopes = TRUE, then default gamma c(0.5, 0.5) is sd for intercept (first element) and same slope (2nd element) for all non-reference levels. Can specify detail by sending vector with value for intercept in cell one and non-reference slopes in all other cells.
#  if correlated_slopes = FALSE, then default gamma c(0.5, 0.5) is sd for block (first element) and treatment:block combinations (2nd element).
# 4. default rho is 0.6 for all correlations between intercept and slopes and between slopes. Can specify by sending vector equivalent to lower triangular of correlation matrix
if(design == "pseudoreplicated"){
correlated_slopes <- FALSE
}
if(n_treat > 2 & length(beta) == 2){# fill out beta
beta <- c(beta, rep(0, n_treat-2))
}
if(length(sigma_exp.block.treat) == 1){#
sigma_exp.block.treat <- rep(sigma_exp.block.treat, n_treat)
}
if(length(gamma) == 2 &
design == "rcbd" &
correlated_slopes == TRUE &
n_treat > 2){# fill out gamma
gamma <- c(gamma[1], rep(gamma[2], (n_treat - 1)))
}
if(length(rho) == 1){# fill out rho
rho <- rep(rho, n_treat*(n_treat-1)/2)
}
if(length(sigma_ss) == 1){# fill out rho
sigma_ss <- rep(sigma_ss, n_treat)
}
N_reps <- n_block * n_treat * n_rep * n_exp
N <- N_reps * n_ss
# returns N by n_sim matrix of fake data. Each sim is in its own column. The first two columns are treatment and block
treatment_levels <- c("Cn", "Tr1", "Tr2", "Tr3")[1:n_treat]
# if reps in blocks are experimental
if(design == "rcbd"){
exp_levels <- paste0(exp_name,
sprintf("%02d", 1:n_exp))
block_levels <- paste0(block_name,
sprintf("%02d", 1:n_block))
block.treat <- do.call(paste, expand.grid(block_levels,
treatment_levels))
rep_levels <- paste0(rep_name,
sprintf("%02d", 1:n_rep))
}
# if reps in blocks are technical
if(design == "pseudoreplicated"){
if(n_block == 1){
block_levels <- paste0(block_name,
sprintf("%02d", 1:n_block))
}else{
block_levels <- paste0(block_name,
sprintf("%02d", 1:(n_block*n_treat)))
}
exp_levels <- paste0(exp_name,
sprintf("%02d", 1:n_exp))
block.treat = paste(rep(block_levels, each = n_treat),
treatment_levels)
rep_levels <- paste0(rep_name,
sprintf("%02d", 1:n_rep))
}
ss_levels <- paste0(ss_name,
sprintf("%02d", 1:n_ss))
groups <- do.call(paste, expand.grid(exp_levels,
block.treat,
rep_levels,
ss_levels
))
fake_data_all <- data.table(NULL)
fake_data_all[, c("exp", "block", "treatment", "rep", "ss") :=
tstrsplit(groups, " ", fixed = TRUE)]
setorder(fake_data_all, exp, block, treatment, rep, ss)
if(unique_id == TRUE){
fake_data_all[, exp_id := paste(
exp_name,
sprintf("%02d",
as.integer(factor(exp))),
sep = "_")]
fake_data_all[, block_id := paste(
block_name,
sprintf("%02d",
as.integer(factor(paste(exp, block)))),
sep = "_")]
fake_data_all[, rep_id := paste(
rep_name,
sprintf("%02d",
as.integer(factor(paste(block_id, treatment, rep)))),
sep = "_")]
fake_data_all[, ss_id := paste(
ss_name,
sprintf("%03d",
as.integer(factor(paste(rep_id, ss)))),
sep = "_")]
}
# make specific to experiment
if(exp_name != "exp"){
setnames(fake_data_all, "exp_id", exp_name)
}
if(block_name != "block"){
setnames(fake_data_all, "block_id", block_name)
}
if(rep_name != "rep"){
setnames(fake_data_all, "rep_id", rep_name)
}
if(ss_name != "ss"){
setnames(fake_data_all, "ss_id", ss_name)
}
# order factor levels
fake_data_all[, treatment := factor(treatment,
levels = treatment_levels)]
# random component
# random variance matrix
# gamma[1] is std of random intercept u_0
# gamma[2] is std of random slope for first non-reference
#     treatment level
# gamma[3] is std of random slope for second non-reference
#     treatment level
# and so on
if(correlated_slopes == TRUE){
L <- diag(gamma)
Psi_R <- diag(length(gamma))
Psi_R[lower.tri(Psi_R, diag = FALSE)] <- rho
Psi_R <- t(Psi_R)
Psi_R[lower.tri(Psi_R, diag = FALSE)] <- rho
Psi <- L%*%Psi_R%*%L
}
fd_mat <- matrix(as.numeric(NA), nrow = N, ncol = n_sim)
colnames(fd_mat) <- paste0("sim_", 1:n_sim)
# View(fake_data_all)
for(sim_i in 1:n_sim){
seed_i <- seed_i + 1
sim_seed <- seed_i
set.seed(sim_seed)
# fixed component
X <- model.matrix(~ treatment,
data = fake_data_all)
y_fixed <- (X %*% beta)[,1]
# random coefficients
# matrix of correlated coefficients with
# n_block (number of block) rows, and
# n_rand (number of random effects) columns
if(design == "rcbd"){# replicates within blocks are experimental reps
if(correlated_slopes == TRUE){
# random intercepts and slopes
# assumes correlation between slopes and intercepts
# Z <- model.matrix(~ 0 + block + block:treatment, data = fake_data_all)
# this generates combination columns for non-reference treatment levels
Z1 <- model.matrix(~ 0 + block +
block:treatment,
data = fake_data_all)
# random effects (coefficients)
# cols are gamma0, gamma1, ...
# rows are block
u_mat <- rmvnorm(n_block,
sigma = Psi)
# flattened to a vector, order is
# g0 for id1..k, then
# g1 for id1..k, then...
u1 <- c(u_mat)
}else{ #if random intercept interaction model
if(n_exp > 1){ # nested
Z1a <- model.matrix(~ 0 + exp, data = fake_data_all)
Z1b <- model.matrix(~ 0 + exp:treatment, data = fake_data_all)
Z1c <- model.matrix(~ 0 + exp:block, data = fake_data_all)
Z1d <- model.matrix(~ 0 + exp:block:treatment,
data = fake_data_all)
Z1 <- cbind(Z1a, Z1b, Z1c, Z1d)
u1 <- c(rnorm(n_exp, mean = 0, sd = sigma_exp),
rnorm(n_exp*n_treat, mean = 0, sd = sigma_exp.treat),
rnorm(n_exp*n_block, mean = 0, sd = sigma_exp.block),
rnorm(n_exp*n_block*n_treat, mean = 0,
sd = sigma_exp.block.treat))
}
if(n_exp == 1){
# random block:treatment intercept
# block:treatment intercept intercept functions as slope
# and is independent of block intercept
# this generates combination columns for *all* treatment levels
# differs from random intercept and slope which only generates
# slope coefs for non ref levels
Z1a <- model.matrix(~ 0 + block, data = fake_data_all)
Z1b <- model.matrix(~ 0 + block:treatment, data = fake_data_all)
Z1 <- cbind(Z1a, Z1b)
u1 <- c(rnorm(n_block, mean = 0,
sd = sigma_exp.block),
rnorm(n_block*n_treat, mean = 0,
sd = rep(sigma_exp.block.treat, each = n_block)))
}
}
}
if(design == "pseudoreplicated"){# replicates within block:treatment are technical reps
# random nested intercept
fake_data_all[, batch := paste0("batch_", as.integer(as.factor(paste(exp, block, treatment, rep))))]
#      Z1 <- model.matrix(~ 0 + rep_id, data = fake_data_all)
Z1 <- model.matrix(~ 0 + batch, data = fake_data_all)
u1 <- rnorm(N_reps, mean = 0, sd = sigma_rep)
}
# random intercepts for replicated block:treatment
# if there is no subsampling within replicate, then these columns are not
# in the specified model (because only one measure of each
# block:treatment:experiment combo) - that is, these columns
# collapse and add to the residual = subsampled error
# ijk - ith treatment, jth block, kth replicate
if(design == "rcbd"){
# if n_exp == 1 then cannot add exp to combination
# if n_rep == 1 then cannot add rep to combination
if(n_rep == 1 & n_exp == 1){
Z2 <- model.matrix(~ 0 + block:treatment,
data = fake_data_all)
colnames(Z2) <- paste0(colnames(Z2), ":rep_1")
}
if(n_rep == 1 & n_exp > 1){
Z2 <- model.matrix(~ 0 + exp:block:treatment,
data = fake_data_all)
colnames(Z2) <- paste0(colnames(Z2), ":rep_1")
}
if(n_rep > 1 & n_exp == 1){
Z2 <- model.matrix(~ 0 + block:treatment:rep,
data = fake_data_all)
}
if(n_rep > 1 & n_exp > 1){
Z2 <- model.matrix(~ 0 + exp:block:treatment:rep,
data = fake_data_all)
}
}else{
Z2 <- NULL
}
# add random block:treatment:rep intercepts
if(design == "rcbd"){
u2 <- rnorm(N_reps, mean = 0, sd = sigma_rep)
}else{
u2 <- NULL
}
# random intercepts for subsampling within replicates = n_rep * n_treat * n_block
# ijkm ith treatment, jth block, kth replicate, mth subsample
# this is just the residual error so don't need coefficients
u <- c(u1, u2)
# put it all together
Z <- cbind(Z1, Z2)
# check!
# colnames(Z) <- 1:ncol(Z)
# head(cbind(fake_data_all[,1:3], Z))
# u_mat
# u
# double check!
# fake_y <- rnorm(nrow(fake_data_all))
# lForm <- lFormula(fake_y ~ treatment + (treatment | block),
#                   fake_data_all)    # lme4's function to process a model formula
# Z1 <- t(as.matrix(lForm$reTrms$Zt))
# u1 <- t(c(t(u_mat)))[1,]
# y_rand2 <- (Z1 %*% u1)[,1]
if(family == "gaussian"){
e_ss <- rnorm(N, mean = 0, sd = sigma_ss[1])
y_rand <- (Z %*% u)[,1] + e_ss
y <- y_fixed + y_rand
}
if(family == "nbinom"){
y_rand <- (Z %*% u)[,1]
mu_sim <- y_fixed + y_rand
mu_bar <- mean(mu_sim)
# p = mu/sigma^2
# r = mu^2/(sigma^2 - mu)
# sigma^2 = mu + mu^2/theta
# theta <- mu^2/(sigma^2 - mu)
# theta = r
theta_sim <- mu_bar^2/(sigma_ss[1]^2 - mu_bar)
y <- rnegbin(N, mu = mu_sim, theta = theta_sim)
}
if(family == "gamma"){
y_rand <- (Z %*% u)[,1]
mu_sim <- y_fixed + y_rand
mu_bar <- mean(mu_sim)
# k = shape, theta = scale
# mean = k * theta
# sigma^2 = k * theta^2
# mean/theta = sigma^2/theta^2
# theta^2*mean/theta = sigma^2
# theta = sigma^2/mean
# theta^2 = mean^2/k^2
# theta^2 = sigma^2/k
# mean^2/k^2 = sigma^2/k
# mean^2/sigma^2 = k^2/k
# mean^2/sigma^2 = k
k_sim <- mu_bar^2/sigma_ss[1]^2
theta_sim <- mu_sim/k_sim
y <- rgamma(N, shape = k_sim, scale = theta_sim)
}
fd_mat[, sim_i] <- y
}
fake_data_all <- cbind(fake_data_all,
fd_mat)
return(fake_data_all)
}
seed <- 2
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
family = "gamma",
n_treat = 2, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(2400, -1000),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 0, # among mouse variance
sigma_ss = 800, # among technical reps within mouse but really this is among mice
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
setnames(fake_data, "sim_1", "csa") # cross-sectional area
fake_data[, genotype := ifelse(treatment == "Cn", "Control", "mKO")]
fake_data[, genotype := factor(genotype, levels = c("Control", "mKO"))]
m1 <- lm(csa ~ genotype, data = fake_data)
m1_emm <- emmeans(m1, specs = "genotype")
m1_pairs <- contrast(m1_emm,
method = "revpairwise")
ggplot_the_response(m1, m1_emm, m1_pairs)
outfile_name <- "crd2x0-gamma.xlsx"
outpath <- here(data_folder, outfile_name)
y_cols <- c("mouse", "genotype", "csa")
write_xlsx(fake_data[, .SD, .SDcols = y_cols], outpath)
outpath
