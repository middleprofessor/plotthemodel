# add axis labels and x-axis tick labels
gg <- gg +
ylab(y_label) +
scale_x_discrete(labels = x_axis_labels)
# add theme
gg <- gg + theme_pubr() +
theme(axis.title.x = element_blank())
# gg
return(gg)
}
# the analysis only comparing the families of tests that we care about
veh = c(1, 0, 0, 0)
dex = c(0, 1, 0, 0)
dex_cc = c(0, 0, 1, 0) # note the wonky ordering in fig 7d
cc = c(0,0,0,1)
focal_contrasts = list(
"DEX - Vehicle" = dex - veh,
"CC - Vehicle" = cc - veh,
"DEX+CC - DEX" = dex_cc - dex,
"interaction" = (dex_cc - dex) - (cc - veh)
)
m1 <- glm.nb(Fbxo32 ~ treatment, data = fig7d)
m1_emm <- emmeans(m1, specs = "treatment", type = "response")
m1_pairs <- contrast(m1_emm,
method = focal_contrasts) |>
summary(infer = TRUE)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = 4,
rescale = 10^6)
m1_pairs <- contrast(m1_emm,
method = focal_contrasts) |>
summary(infer = TRUE)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = 4,
rescale = 10^6)
m1_pairs
# correct m1_pairs if its a list
if(!is.null(names(m1_pairs[[1]]))){
m1_pairs <- combine_contrasts(m1_pairs)
}
ptm <- get_ptm_parameters(m1, m1_pairs)
ptm$show_nest <- show_nest_data
if(!is.na(nest_id)){ptm$nest_id <- nest_id}
if(is.na(y_label)){y_label <- ptm$response_label}
gg_data <- create_plot_data(m1, ptm)
gg_emm <- create_emm_data(m1_emm, ptm)
ptm$plot_factor_levels <- gg_emm[, plot_factor] |> as.character()
gg_pairs <- create_pairs_data(m1_pairs, ptm)
m1_pairs
create_pairs_data <- function(m1_pairs,
hide_pairs, # the rows to hide
ptm){
if(is.data.frame(m1_pairs) == TRUE){
gg_pairs <- data.table(m1_pairs)
}else{
gg_pairs <- summary(m1_pairs) %>%
data.table()
}
gg_pairs <- gg_pairs[-hide_pairs,]
# is the contrast a difference or ratio?
contrast_is <- "difference"
if("ratio" %in% names(gg_pairs)){
contrast_is <- "ratio"
}
# create group1 and group2 columns (the two groups of contrast)
if(contrast_is == "difference"){
groups <- unlist(str_split(gg_pairs$contrast, " - "))
}
if(contrast_is == "ratio"){
groups <- unlist(str_split(gg_pairs$contrast, " / "))
}
groups <- lapply(groups, remove_parentheses) |>
unlist()
i_seq <- 1:length(groups)
gg_pairs[, group1_label := groups[i_seq%%2 != 0]]
gg_pairs[, group2_label := groups[i_seq%%2 == 0]]
if(ptm$simple == TRUE){ # works w both pairwise and revpairwise
simple_group_1 <- names(gg_pairs)[1]
simple_group_2 <- names(gg_pairs)[2]
gg_pairs[get(simple_group_1) != ".", group1_label := paste(group1_label, get(simple_group_1))]
gg_pairs[get(simple_group_1) != ".", group2_label := paste(group2_label, get(simple_group_1))]
gg_pairs[get(simple_group_2) != ".", group1_label := paste(get(simple_group_2), group1_label)]
gg_pairs[get(simple_group_2) != ".", group2_label := paste(get(simple_group_2), group2_label)]
}
if(ptm$two_factors == TRUE){
gg_pairs[, group1_label := str_replace(group1_label, " ", "\n")]
gg_pairs[, group2_label := str_replace(group2_label, " ", "\n")]
}
gg_pairs[, group1 := match(group1_label, ptm$plot_factor_levels)]
gg_pairs[, group2 := match(group2_label, ptm$plot_factor_levels)]
gg_pairs[, p.print := pretty_pvalues(p.value)]
gg_pairs[, p.print := format_p(p.value, whitespace = FALSE)]
return(gg_pairs)
}
# correct m1_pairs if its a list
if(!is.null(names(m1_pairs[[1]]))){
m1_pairs <- combine_contrasts(m1_pairs)
}
ptm <- get_ptm_parameters(m1, m1_pairs)
ptm$show_nest <- show_nest_data
if(!is.na(nest_id)){ptm$nest_id <- nest_id}
if(is.na(y_label)){y_label <- ptm$response_label}
gg_data <- create_plot_data(m1, ptm)
gg_emm <- create_emm_data(m1_emm, ptm)
ptm$plot_factor_levels <- gg_emm[, plot_factor] |> as.character()
gg_pairs <- create_pairs_data(m1_pairs, hide_pairs, ptm)
m1_pairs
hide_pairs
hide_pairs <- 4
if(!is.null(names(m1_pairs[[1]]))){
m1_pairs <- combine_contrasts(m1_pairs)
}
ptm <- get_ptm_parameters(m1, m1_pairs)
ptm$show_nest <- show_nest_data
if(!is.na(nest_id)){ptm$nest_id <- nest_id}
if(is.na(y_label)){y_label <- ptm$response_label}
gg_data <- create_plot_data(m1, ptm)
gg_emm <- create_emm_data(m1_emm, ptm)
ptm$plot_factor_levels <- gg_emm[, plot_factor] |> as.character()
gg_pairs <- create_pairs_data(m1_pairs, hide_pairs, ptm)
plot_response <- function(m1,
m1_emm,
m1_pairs,
hide_pairs = NA, # rows of m1_pairs to hide
rescale = 1,
join_blocks = FALSE,
show_nest_data = FALSE,
block_id = NA, # this is the column containing the blocks
nest_id = NA, # this is the column containing the cluster
jitter_spread = 0.8,
jitter_width = 0.2,
palette = "pal_ggplot",
x_axis_labels = NA,
y_label = NA){
# correct m1_pairs if its a list
if(!is.null(names(m1_pairs[[1]]))){
m1_pairs <- combine_contrasts(m1_pairs)
}
ptm <- get_ptm_parameters(m1, m1_pairs)
ptm$show_nest <- show_nest_data
if(!is.na(nest_id)){ptm$nest_id <- nest_id}
if(is.na(y_label)){y_label <- ptm$response_label}
gg_data <- create_plot_data(m1, ptm)
gg_emm <- create_emm_data(m1_emm, ptm)
ptm$plot_factor_levels <- gg_emm[, plot_factor] |> as.character()
gg_pairs <- create_pairs_data(m1_pairs, hide_pairs, ptm)
if(!is.na(nest_id)){
gg_nest <- create_nest_data(m1, gg_data, ptm)
}else{
gg_nest <- NA
}
gg_pairs <- add_y_pos(gg_pairs, gg_data, gg_emm, gg_nest, ptm)
if(any(is.na(x_axis_labels)) == TRUE){x_axis_labels <- levels(gg_data$plot_factor)}
# rescale
gg_data[, y := y / rescale]
gg_emm[, mean := mean / rescale]
gg_emm[, lo := lo / rescale]
gg_emm[, hi := hi / rescale]
gg_pairs[, y_pos := y_pos / rescale]
if(!is.na(gg_nest)){
gg_nest[, nest_mean := nest_mean / rescale]
}
gg <- ggplot(data = gg_data,
aes(x = plot_factor_id,
y = y))
# add nested data
if(ptm$nested == TRUE){
# nested reps
if(show_nest_data == TRUE){
gg <- gg +
geom_sina(data = gg_data,
aes(x = plot_factor_id,
y = y,
alpha = 1),
scale = "width",
maxwidth = jitter_width,
size = 2,
color = "gray",
show.legend = FALSE)
}
}
# join blocks
if(ptm$blocked == TRUE & join_blocks == TRUE){
gg <- gg +
geom_line(data = gg_data,
aes(x = plot_factor_id,
y = y,
group = get(ptm$block_id)),
color = "grey"
)
}
if(ptm$nested == FALSE){
# experimental reps
gg <- gg +
geom_jitter(data = gg_data,
aes(x = plot_factor_id,
y = y,
color = factor_1),
width = jitter_width,
size = 4,
show.legend = FALSE)
}
# add nest means = experimental reps
if(ptm$nested == TRUE){
gg <- gg +
geom_jitter(data = gg_nest,
aes(x = plot_factor_id,
y = nest_mean,
color = factor_1),
width = jitter_width,
size = 4,
show.legend = FALSE)
}
# add model means and CI
gg <- gg +
geom_errorbar(data = gg_emm,
aes(x = plot_factor_id,
y = mean,
ymin = lo,
ymax = hi,
width =.1),
show.legend = FALSE) +
geom_point(data = gg_emm,
aes(x = plot_factor_id,
y = mean),
size = 4,
show.legend = FALSE)
# add some color
if(palette != "pal_ggplot"){
gg <- gg +
scale_color_manual(values = get(palette))
}
# add p-value brackets
gg <- gg +
stat_pvalue_manual(gg_pairs,
label = "p.print",
y.position = "y_pos",
# xmin = "minx",
# xmax = "maxx",
size = 4,
tip.length = 0.01)
# add axis labels and x-axis tick labels
gg <- gg +
ylab(y_label) +
scale_x_discrete(labels = x_axis_labels)
# add theme
gg <- gg + theme_pubr() +
theme(axis.title.x = element_blank())
# gg
return(gg)
}
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = 4,
rescale = 10^6)
knitr::purl("ggptm.Rmd")
jmvtools::install()
m1 <- lm(Fbxo32 ~ treatment, data = fig7d)
m1_emm <- emmeans(m1, specs = "treatment")
m1_pairs <- contrast(m1_emm,
method = "revpairwise") |>
summary(infer = TRUE)
plot_response(m1,
m1_emm,
m1_pairs)
hide_pairs = NA
rescale = 1
join_blocks = FALSE
x_axis_labels = NA
# correct m1_pairs if its a list
if(!is.null(names(m1_pairs[[1]]))){
m1_pairs <- combine_contrasts(m1_pairs)
}
ptm <- get_ptm_parameters(m1, m1_pairs)
ptm$show_nest <- show_nest_data
if(!is.na(nest_id)){ptm$nest_id <- nest_id}
if(is.na(y_label)){y_label <- ptm$response_label}
gg_data <- create_plot_data(m1, ptm)
gg_emm <- create_emm_data(m1_emm, ptm)
ptm$plot_factor_levels <- gg_emm[, plot_factor] |> as.character()
gg_pairs <- create_pairs_data(m1_pairs, hide_pairs, ptm)
create_pairs_data <- function(m1_pairs,
hide_pairs = NA, # the rows to hide
ptm){
if(is.data.frame(m1_pairs) == TRUE){
gg_pairs <- data.table(m1_pairs)
}else{
gg_pairs <- summary(m1_pairs) %>%
data.table()
}
gg_pairs <- gg_pairs[-hide_pairs,]
# is the contrast a difference or ratio?
contrast_is <- "difference"
if("ratio" %in% names(gg_pairs)){
contrast_is <- "ratio"
}
# create group1 and group2 columns (the two groups of contrast)
if(contrast_is == "difference"){
groups <- unlist(str_split(gg_pairs$contrast, " - "))
}
if(contrast_is == "ratio"){
groups <- unlist(str_split(gg_pairs$contrast, " / "))
}
groups <- lapply(groups, remove_parentheses) |>
unlist()
i_seq <- 1:length(groups)
gg_pairs[, group1_label := groups[i_seq%%2 != 0]]
gg_pairs[, group2_label := groups[i_seq%%2 == 0]]
if(ptm$simple == TRUE){ # works w both pairwise and revpairwise
simple_group_1 <- names(gg_pairs)[1]
simple_group_2 <- names(gg_pairs)[2]
gg_pairs[get(simple_group_1) != ".", group1_label := paste(group1_label, get(simple_group_1))]
gg_pairs[get(simple_group_1) != ".", group2_label := paste(group2_label, get(simple_group_1))]
gg_pairs[get(simple_group_2) != ".", group1_label := paste(get(simple_group_2), group1_label)]
gg_pairs[get(simple_group_2) != ".", group2_label := paste(get(simple_group_2), group2_label)]
}
if(ptm$two_factors == TRUE){
gg_pairs[, group1_label := str_replace(group1_label, " ", "\n")]
gg_pairs[, group2_label := str_replace(group2_label, " ", "\n")]
}
gg_pairs[, group1 := match(group1_label, ptm$plot_factor_levels)]
gg_pairs[, group2 := match(group2_label, ptm$plot_factor_levels)]
gg_pairs[, p.print := pretty_pvalues(p.value)]
gg_pairs[, p.print := format_p(p.value, whitespace = FALSE)]
return(gg_pairs)
}
create_pairs_data <- function(m1_pairs,
hide_pairs, # the rows to hide
ptm){
if(is.data.frame(m1_pairs) == TRUE){
gg_pairs <- data.table(m1_pairs)
}else{
gg_pairs <- summary(m1_pairs) %>%
data.table()
}
if(!is.na(hide_pairs)){
gg_pairs <- gg_pairs[-hide_pairs,]
}
# is the contrast a difference or ratio?
contrast_is <- "difference"
if("ratio" %in% names(gg_pairs)){
contrast_is <- "ratio"
}
# create group1 and group2 columns (the two groups of contrast)
if(contrast_is == "difference"){
groups <- unlist(str_split(gg_pairs$contrast, " - "))
}
if(contrast_is == "ratio"){
groups <- unlist(str_split(gg_pairs$contrast, " / "))
}
groups <- lapply(groups, remove_parentheses) |>
unlist()
i_seq <- 1:length(groups)
gg_pairs[, group1_label := groups[i_seq%%2 != 0]]
gg_pairs[, group2_label := groups[i_seq%%2 == 0]]
if(ptm$simple == TRUE){ # works w both pairwise and revpairwise
simple_group_1 <- names(gg_pairs)[1]
simple_group_2 <- names(gg_pairs)[2]
gg_pairs[get(simple_group_1) != ".", group1_label := paste(group1_label, get(simple_group_1))]
gg_pairs[get(simple_group_1) != ".", group2_label := paste(group2_label, get(simple_group_1))]
gg_pairs[get(simple_group_2) != ".", group1_label := paste(get(simple_group_2), group1_label)]
gg_pairs[get(simple_group_2) != ".", group2_label := paste(get(simple_group_2), group2_label)]
}
if(ptm$two_factors == TRUE){
gg_pairs[, group1_label := str_replace(group1_label, " ", "\n")]
gg_pairs[, group2_label := str_replace(group2_label, " ", "\n")]
}
gg_pairs[, group1 := match(group1_label, ptm$plot_factor_levels)]
gg_pairs[, group2 := match(group2_label, ptm$plot_factor_levels)]
gg_pairs[, p.print := pretty_pvalues(p.value)]
gg_pairs[, p.print := format_p(p.value, whitespace = FALSE)]
return(gg_pairs)
}
plot_response(m1,
m1_emm,
m1_pairs)
knitr::purl("ggptm.Rmd")
jmvtools::install()
jmvtools::install()
getwd()
setwd("/Users/walker/Documents/Github/plotthemodel/PTM")
jmvtools::install()
hide_pairs
# correct m1_pairs if its a list
if(!is.null(names(m1_pairs[[1]]))){
m1_pairs <- combine_contrasts(m1_pairs)
}
ptm <- get_ptm_parameters(m1, m1_pairs)
ptm$show_nest <- show_nest_data
if(!is.na(nest_id)){ptm$nest_id <- nest_id}
if(is.na(y_label)){y_label <- ptm$response_label}
gg_data <- create_plot_data(m1, ptm)
gg_emm <- create_emm_data(m1_emm, ptm)
ptm$plot_factor_levels <- gg_emm[, plot_factor] |> as.character()
gg_pairs <- create_pairs_data(m1_pairs, hide_pairs, ptm)
if(!is.na(nest_id)){
gg_nest <- create_nest_data(m1, gg_data, ptm)
}else{
gg_nest <- NA
}
gg_pairs <- add_y_pos(gg_pairs, gg_data, gg_emm, gg_nest, ptm)
if(any(is.na(x_axis_labels)) == TRUE){x_axis_labels <- levels(gg_data$plot_factor)}
# rescale
gg_data[, y := y / rescale]
gg_emm[, mean := mean / rescale]
gg_emm[, lo := lo / rescale]
gg_emm[, hi := hi / rescale]
gg_pairs[, y_pos := y_pos / rescale]
if(!is.na(gg_nest)){
gg_nest[, nest_mean := nest_mean / rescale]
}
gg <- ggplot(data = gg_data,
aes(x = plot_factor_id,
y = y))
# add nested data
if(ptm$nested == TRUE){
# nested reps
if(show_nest_data == TRUE){
gg <- gg +
geom_sina(data = gg_data,
aes(x = plot_factor_id,
y = y,
alpha = 1),
scale = "width",
maxwidth = jitter_width,
size = 2,
color = "gray",
show.legend = FALSE)
}
}
# join blocks
if(ptm$blocked == TRUE & join_blocks == TRUE){
gg <- gg +
geom_line(data = gg_data,
aes(x = plot_factor_id,
y = y,
group = get(ptm$block_id)),
color = "grey"
)
}
if(ptm$nested == FALSE){
# experimental reps
gg <- gg +
geom_jitter(data = gg_data,
aes(x = plot_factor_id,
y = y,
color = factor_1),
width = jitter_width,
size = 4,
show.legend = FALSE)
}
# add nest means = experimental reps
if(ptm$nested == TRUE){
gg <- gg +
geom_jitter(data = gg_nest,
aes(x = plot_factor_id,
y = nest_mean,
color = factor_1),
width = jitter_width,
size = 4,
show.legend = FALSE)
}
# add model means and CI
gg <- gg +
geom_errorbar(data = gg_emm,
aes(x = plot_factor_id,
y = mean,
ymin = lo,
ymax = hi,
width =.1),
show.legend = FALSE) +
geom_point(data = gg_emm,
aes(x = plot_factor_id,
y = mean),
size = 4,
show.legend = FALSE)
# add some color
if(palette != "pal_ggplot"){
gg <- gg +
scale_color_manual(values = get(palette))
}
# add p-value brackets
gg <- gg +
stat_pvalue_manual(gg_pairs,
label = "p.print",
y.position = "y_pos",
# xmin = "minx",
# xmax = "maxx",
size = 4,
tip.length = 0.01)
# add axis labels and x-axis tick labels
gg <- gg +
ylab(y_label) +
scale_x_discrete(labels = x_axis_labels)
# add theme
gg <- gg + theme_pubr() +
theme(axis.title.x = element_blank())
# gg
gg
knitr::purl("ggptm.Rmd")
getwd()
setwd("/Users/walker/Documents/Github/plotthemodel")
knitr::purl("ggptm.Rmd")
knitr::purl("ggptm.Rmd")
setwd("/Users/walker/Documents/Github/plotthemodel/PTM")
jmvtools::install()
jmvtools::install()
