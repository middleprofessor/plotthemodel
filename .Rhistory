#     treatment level
# and so on
if(correlated_slopes == TRUE){
L <- diag(gamma)
Psi_R <- diag(length(gamma))
Psi_R[lower.tri(Psi_R, diag = FALSE)] <- rho
Psi_R <- t(Psi_R)
Psi_R[lower.tri(Psi_R, diag = FALSE)] <- rho
Psi <- L%*%Psi_R%*%L
}
fd_mat <- matrix(as.numeric(NA), nrow = N, ncol = n_sim)
colnames(fd_mat) <- paste0("sim_", 1:n_sim)
# View(fake_data_all)
for(sim_i in 1:n_sim){
seed_i <- seed_i + 1
sim_seed <- seed_i
set.seed(sim_seed)
# fixed component
X <- model.matrix(~ treatment,
data = fake_data_all)
y_fixed <- (X %*% beta)[,1]
# random coefficients
# matrix of correlated coefficients with
# n_block (number of block) rows, and
# n_rand (number of random effects) columns
if(design == "rcbd"){# replicates within blocks are experimental reps
if(correlated_slopes == TRUE){
# random intercepts and slopes
# assumes correlation between slopes and intercepts
# Z <- model.matrix(~ 0 + block + block:treatment, data = fake_data_all)
# this generates combination columns for non-reference treatment levels
Z1 <- model.matrix(~ 0 + block +
block:treatment,
data = fake_data_all)
# random effects (coefficients)
# cols are gamma0, gamma1, ...
# rows are block
u_mat <- rmvnorm(n_block,
sigma = Psi)
# flattened to a vector, order is
# g0 for id1..k, then
# g1 for id1..k, then...
u1 <- c(u_mat)
}else{ #if random intercept interaction model
if(n_exp > 1){ # nested
Z1a <- model.matrix(~ 0 + exp, data = fake_data_all)
Z1b <- model.matrix(~ 0 + exp:treatment, data = fake_data_all)
Z1c <- model.matrix(~ 0 + exp:block, data = fake_data_all)
Z1d <- model.matrix(~ 0 + exp:block:treatment,
data = fake_data_all)
Z1 <- cbind(Z1a, Z1b, Z1c, Z1d)
u1 <- c(rnorm(n_exp, mean = 0, sd = sigma_exp),
rnorm(n_exp*n_treat, mean = 0, sd = sigma_exp.treat),
rnorm(n_exp*n_block, mean = 0, sd = sigma_exp.block),
rnorm(n_exp*n_block*n_treat, mean = 0,
sd = sigma_exp.block.treat))
}
if(n_exp == 1){
# random block:treatment intercept
# block:treatment intercept intercept functions as slope
# and is independent of block intercept
# this generates combination columns for *all* treatment levels
# differs from random intercept and slope which only generates
# slope coefs for non ref levels
Z1a <- model.matrix(~ 0 + block, data = fake_data_all)
Z1b <- model.matrix(~ 0 + block:treatment, data = fake_data_all)
Z1 <- cbind(Z1a, Z1b)
u1 <- c(rnorm(n_block, mean = 0,
sd = sigma_exp.block),
rnorm(n_block*n_treat, mean = 0,
sd = rep(sigma_exp.block.treat, each = n_block)))
}
}
}
if(design == "pseudoreplicated"){# replicates within block:treatment are technical reps
# random nested intercept
fake_data_all[, batch := paste0("batch_", as.integer(as.factor(paste(exp, block, treatment, rep))))]
#      Z1 <- model.matrix(~ 0 + rep_id, data = fake_data_all)
Z1 <- model.matrix(~ 0 + batch, data = fake_data_all)
u1 <- rnorm(N_reps, mean = 0, sd = sigma_rep)
}
# random intercepts for replicated block:treatment
# if there is no subsampling within replicate, then these columns are not
# in the specified model (because only one measure of each
# block:treatment:experiment combo) - that is, these columns
# collapse and add to the residual = subsampled error
# ijk - ith treatment, jth block, kth replicate
if(design == "rcbd"){
# if n_exp == 1 then cannot add exp to combination
# if n_rep == 1 then cannot add rep to combination
if(n_rep == 1 & n_exp == 1){
Z2 <- model.matrix(~ 0 + block:treatment,
data = fake_data_all)
colnames(Z2) <- paste0(colnames(Z2), ":rep_1")
}
if(n_rep == 1 & n_exp > 1){
Z2 <- model.matrix(~ 0 + exp:block:treatment,
data = fake_data_all)
colnames(Z2) <- paste0(colnames(Z2), ":rep_1")
}
if(n_rep > 1 & n_exp == 1){
Z2 <- model.matrix(~ 0 + block:treatment:rep,
data = fake_data_all)
}
if(n_rep > 1 & n_exp > 1){
Z2 <- model.matrix(~ 0 + exp:block:treatment:rep,
data = fake_data_all)
}
}else{
Z2 <- NULL
}
# add random block:treatment:rep intercepts
if(design == "rcbd"){
u2 <- rnorm(N_reps, mean = 0, sd = sigma_rep)
}else{
u2 <- NULL
}
# random intercepts for subsampling within replicates = n_rep * n_treat * n_block
# ijkm ith treatment, jth block, kth replicate, mth subsample
# this is just the residual error so don't need coefficients
u <- c(u1, u2)
# put it all together
Z <- cbind(Z1, Z2)
# check!
# colnames(Z) <- 1:ncol(Z)
# head(cbind(fake_data_all[,1:3], Z))
# u_mat
# u
# double check!
# fake_y <- rnorm(nrow(fake_data_all))
# lForm <- lFormula(fake_y ~ treatment + (treatment | block),
#                   fake_data_all)    # lme4's function to process a model formula
# Z1 <- t(as.matrix(lForm$reTrms$Zt))
# u1 <- t(c(t(u_mat)))[1,]
# y_rand2 <- (Z1 %*% u1)[,1]
if(family == "gaussian"){
e_ss <- rnorm(N, mean = 0, sd = sigma_ss[1])
y_rand <- (Z %*% u)[,1] + e_ss
y <- y_fixed + y_rand
}
if(family == "nbinom"){
y_rand <- (Z %*% u)[,1]
mu_sim <- y_fixed + y_rand
mu_bar <- mean(mu_sim)
# p = mu/sigma^2
# r = mu^2/(sigma^2 - mu)
# sigma^2 = mu + mu^2/theta
# theta <- mu^2/(sigma^2 - mu)
# theta = r
theta_sim <- mu_bar^2/(sigma_ss[1]^2 - mu_bar)
y <- rnegbin(N, mu = mu_sim, theta = theta_sim)
}
if(family == "gamma"){
y_rand <- (Z %*% u)[,1]
mu_sim <- y_fixed + y_rand
mu_bar <- mean(mu_sim)
# k = shape, theta = scale
# mean = k * theta
# sigma^2 = k * theta^2
# mean/theta = sigma^2/theta^2
# theta^2*mean/theta = sigma^2
# theta = sigma^2/mean
# theta^2 = mean^2/k^2
# theta^2 = sigma^2/k
# mean^2/k^2 = sigma^2/k
# mean^2/sigma^2 = k^2/k
# mean^2/sigma^2 = k
k_sim <- mu_bar^2/sigma_ss[1]^2 # constant shape
theta_sim <- mu_sim/k_sim # variable scale depending on mu
y <- rgamma(N, shape = k_sim, scale = theta_sim)
}
fd_mat[, sim_i] <- y
}
fake_data_all <- cbind(fake_data_all,
fd_mat)
return(fake_data_all)
}
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
family = "gamma",
n_treat = 2, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 20, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(3.5, 4),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 0, # among mouse variance
sigma_ss = 2, # among technical reps within mouse but really this is among mice
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
setnames(fake_data, "sim_1", "csa") # cross-sectional area
fake_data[, genotype := ifelse(treatment == "Cn", "Control", "mKO")]
fake_data[, genotype := factor(genotype, levels = c("Control", "mKO"))]
m1 <- lm(csa ~ genotype, data = fake_data)
m1_emm <- emmeans(m1, specs = "genotype")
m1_pairs <- contrast(m1_emm,
method = "revpairwise")
ggplot_the_response(m1, m1_emm, m1_pairs)
glm1 <- glm(csa ~ genotype, family = Gamma(link = "log"), data = fake_data)
glm1_emm <- emmeans(glm1, specs = "genotype", type = "response")
glm1_pairs <- contrast(glm1_emm,
method = "revpairwise")
outfile_name <- "crd2x0-gamma.xlsx"
outpath <- here(data_folder, outfile_name)
y_cols <- c("mouse", "genotype", "csa")
write_xlsx(fake_data[, .SD, .SDcols = y_cols], outpath)
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
family = "gamma",
n_treat = 2, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 20, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(3.5, 4),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 0, # among mouse variance
sigma_ss = 1.5, # among technical reps within mouse but really this is among mice
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
setnames(fake_data, "sim_1", "csa") # cross-sectional area
fake_data[, genotype := ifelse(treatment == "Cn", "Control", "mKO")]
fake_data[, genotype := factor(genotype, levels = c("Control", "mKO"))]
m1 <- lm(csa ~ genotype, data = fake_data)
m1_emm <- emmeans(m1, specs = "genotype")
m1_pairs <- contrast(m1_emm,
method = "revpairwise")
ggplot_the_response(m1, m1_emm, m1_pairs)
glm1 <- glm(csa ~ genotype, family = Gamma(link = "log"), data = fake_data)
glm1_emm <- emmeans(glm1, specs = "genotype", type = "response")
glm1_pairs <- contrast(glm1_emm,
method = "revpairwise")
outfile_name <- "crd2x0-gamma.xlsx"
outpath <- here(data_folder, outfile_name)
y_cols <- c("mouse", "genotype", "csa")
write_xlsx(fake_data[, .SD, .SDcols = y_cols], outpath)
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
family = "gamma",
n_treat = 2, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 20, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(3.5, 4),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 0, # among mouse variance
sigma_ss = 1.5, # among technical reps within mouse but really this is among mice
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
setnames(fake_data, "sim_1", "lactate") # cross-sectional area
fake_data[, genotype := ifelse(treatment == "Cn", "Control", "mKO")]
fake_data[, genotype := factor(genotype, levels = c("Control", "mKO"))]
m1 <- lm(csa ~ genotype, data = fake_data)
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
family = "gamma",
n_treat = 2, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 20, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(3.5, 4),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 0, # among mouse variance
sigma_ss = 1.5, # among technical reps within mouse but really this is among mice
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
setnames(fake_data, "sim_1", "lactate") # cross-sectional area
fake_data[, genotype := ifelse(treatment == "Cn", "Control", "mKO")]
fake_data[, genotype := factor(genotype, levels = c("Control", "mKO"))]
m1 <- lm(lactate ~ genotype, data = fake_data)
m1_emm <- emmeans(m1, specs = "genotype")
m1_pairs <- contrast(m1_emm,
method = "revpairwise")
ggplot_the_response(m1, m1_emm, m1_pairs)
glm1 <- glm(lactate ~ genotype, family = Gamma(link = "log"), data = fake_data)
glm1_emm <- emmeans(glm1, specs = "genotype", type = "response")
glm1_pairs <- contrast(glm1_emm,
method = "revpairwise")
outfile_name <- "crd2x0-gamma.xlsx"
outpath <- here(data_folder, outfile_name)
y_cols <- c("mouse", "genotype", "lactate")
write_xlsx(fake_data[, .SD, .SDcols = y_cols], outpath)
jmvtools::install()
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
n_treat = 6, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(10, 1,-1,1,-1,1),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 1, # among mouse variance
sigma_ss = 0, # among technical reps within mouse
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
n_treat = 4, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(10, 1,-1,1),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 1, # among mouse variance
sigma_ss = 0, # among technical reps within mouse
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
n_treat = 5, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(10, 1,-1,1,-1),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 1, # among mouse variance
sigma_ss = 0, # among technical reps within mouse
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
n_treat = 3, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(10, 1,-1),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 1, # among mouse variance
sigma_ss = 0, # among technical reps within mouse
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 2,
n_treat = 3, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(10, 1,-1),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 1, # among mouse variance
sigma_ss = 0, # among technical reps within mouse
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
fake_data
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
n_treat = 3, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 2, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(10, 1,-1),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 1, # among mouse variance
sigma_ss = 0, # among technical reps within mouse
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
fake_data
fake_data[, treatment := paste(treatment, exp, sep = "_")]
fake_data <- fake_data[, .SD, .SDcols = c(treatment, sim_1)]
fake_data <- fake_data[, .SD, .SDcols = c("treatment", "sim_1")]
fake_data[, .(SE = sd(sim_1)/sqrt(.N)), by = "treatment"]
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
n_treat = 3, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 2, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(10, 1,-1),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 1, # among mouse variance
sigma_ss = 0, # among technical reps within mouse
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
fake_data[, treatment := paste(treatment, exp, sep = "_")]
fake_data <- fake_data[, .SD, .SDcols = c("treatment", "sim_1")]
fake_data[, .(SE = sd(sim_1)/sqrt(.N)), by = "treatment"]
m1 <- lm(sim_1 ~ treatment, data = fake_data)
m1_emm <- emmeans(m1, specs = "treatment")
m1_emm
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
n_treat = 3, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 2, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(10, 1,-1),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 1, # among mouse variance
sigma_ss = 0, # among technical reps within mouse
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
fake_data[, treatment := paste(treatment, exp, sep = "_")]
sample_SEM <- fake_data <- fake_data[, .SD, .SDcols = c("treatment", "sim_1")]
fake_data[, .(SE = sd(sim_1)/sqrt(.N)), by = "treatment"]
m1 <- lm(sim_1 ~ treatment, data = fake_data)
m1_emm <- emmeans(m1, specs = "treatment")
sample_SEM
m1_emm
mean(sample_SEM$SE)
seed <- 1
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
n_treat = 3, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 10, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 2, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(10, 1,-1),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = 1, # among mouse variance
sigma_ss = 0, # among technical reps within mouse
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
fake_data[, treatment := paste(treatment, exp, sep = "_")]
fake_data <- fake_data[, .SD, .SDcols = c("treatment", "sim_1")]
sample_SEM <- fake_data[, .(SE = sd(sim_1)/sqrt(.N)), by = "treatment"]
m1 <- lm(sim_1 ~ treatment, data = fake_data)
m1_emm <- emmeans(m1, specs = "treatment")
sample_SEM
m1_emm
mean(sample_SEM$SE)
knitr::purl("ggptm.Rmd")
knitr::purl("ggptm.Rmd")
knitr::purl("ggptm.Rmd")
