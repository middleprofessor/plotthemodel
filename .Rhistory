# sigma_e^2 = sigma_rep^2 + sigma_ss^2
# icc = sigma_rep^2 / sigma_e^2
icc <- 0.6
sigma_e <- 2
sigma_rep <- sqrt(icc*sigma_e^2)
sigma_ss <- sqrt(sigma_e^2 - sigma_rep^2)
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
n_treat = 2, # number of treatment levels
n_block = 1, # number of litters (blocks)
n_rep = 6, # number of mice per litter:treatment
n_ss = 80, # number of subsamples
n_exp = 1, # number of experiments
design = "pseudoreplicated",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(21, -3),
sigma_exp.block = 0, # only sampling 1 litter
sigma_rep = sigma_rep, # among mouse variance
sigma_ss = sigma_ss, # among technical reps within mouse
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
setnames(fake_data, c("ss", "sim_1"), c("technical_rep", "diameter")) # cross-sectional area
fake_data[, genotype := ifelse(treatment == "Cn", "Control", "mKO")]
fake_data[, genotype := factor(genotype, levels = c("Control", "mKO"))]
m1 <- lmer(diameter ~ genotype + (1|mouse), data = fake_data)
m1_emm <- emmeans(m1, specs = "genotype")
m1_pairs <- contrast(m1_emm,
method = "revpairwise")
ggplot_the_response(m1, m1_emm, m1_pairs)
m1_pairs
length(m1_pairs)
is.list(m1_pairs)
m1_pairs_pw <- NULL
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each") |>
summary(infer = TRUE)
is.list(m1_pairs)
m1_pairs
seed <- 1
# sigma_e^2 = sigma_rep^2 + sigma_ss^2
# icc = sigma_rep^2 / sigma_e^2
icc <- 0.6
sigma_e <- 400
sigma_rep <- sqrt(icc*sigma_e^2)
sigma_ss <- sqrt(sigma_e^2 - sigma_rep^2)
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
n_treat = 4, # number of treatment levels
n_block = 8, # number of litters (blocks)
n_rep = 1, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "rcbd",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(2400, -800, -700, -1200),
sigma_exp.block = sigma_rep, # sd among exp:block (or block if n_exp = 1). This is among mouse
sigma_exp.block.treat = 100, # sd among exp:block:treat
sigma_ss = sigma_ss, # sd among subsamples within replication of treatment:block
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
setnames(fake_data, c("treatment", "sim_1"), c("fake_treatment", "csa")) # cross-sectional area
fake_data[fake_treatment == "Cn", treatment := "Intact LONP1"]
fake_data[fake_treatment == "Tr1", treatment := "Denerv LONP1"]
fake_data[fake_treatment == "Tr2", treatment := "Intact mKO"]
fake_data[fake_treatment == "Tr3", treatment := "Denerv mKO"]
fake_data[, c("surgery", "genotype") := tstrsplit(treatment, " ")]
m1 <- lmer(csa ~ surgery * genotype + (1 | litter), data = fake_data)
m1_emm <- emmeans(m1, specs = c("surgery", "genotype"))
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each",
combine = "TRUE") |>
summary(infer = TRUE)
m1_pairs <- contrast(m1_emm,
method = "pairwise",
simple = "each",
combine = "TRUE") |>
summary(infer = TRUE)
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each") |>
summary(infer = TRUE)
ggplot_the_response(m1, m1_emm, m1_pairs)
if(is.list(m1_pairs)){
}
m1_pairs
unlist(m1_pairs)
part_1 <- m1_pairs[[1]]
part_1
as.data.frame(part_1)
simple_group_1 <- names(part_1)[2]
simple_group_1
part_1
names(part_1)
part_1[[1]]
is.data.frame(part_1)
part_1
dim(part_1)
data.table(part_1)
part_2 <- m1_pairs[[2]]
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each",
combine = "TRUE") |>
summary(infer = TRUE)
m1_pairs
part_1
names(part_1)
part_1_c <- cbind(
group1 = part_1[, 2],
group2 = ".",
part_1[, -2]
)
part_1_c
part_1_c <- cbind(
group1 = part_1[, 2],
group2 = ".",
part_1[, -2]
)
part_2_c <- cbind(
group1 = ".",
group2 = part_1[, 2],
part_1[, -2]
)
m1_pairs_c <- rbind(part_1_c, part_2_c)
colnames(m1_pairs_c)[1:2] <- c(names(part_1)[2], names(part_2)[2])
m1_pairs_c
part_1_c <- cbind(
group1 = part_1[, 2],
group2 = ".",
part_1[, -2]
)
part_2_c <- cbind(
group1 = ".",
group2 = part_1[, 2],
part_2[, -2]
)
m1_pairs_c <- rbind(part_1_c, part_2_c)
colnames(m1_pairs_c)[1:2] <- c(names(part_1)[2], names(part_2)[2])
m1_pairs_c
part_1_c <- cbind(
group1 = part_1[, 2],
group2 = ".",
part_1[, -2]
)
part_2_c <- cbind(
group1 = ".",
group2 = part_2[, 2],
part_2[, -2]
)
m1_pairs_c <- rbind(part_1_c, part_2_c)
colnames(m1_pairs_c)[1:2] <- c(names(part_1)[2], names(part_2)[2])
m1_pairs_c
combine_contrasts <- function(m1_pairs){
part_1 <- m1_pairs[[1]]
part_2 <- m1_pairs[[2]]
part_1_c <- cbind(
group1 = part_1[, 2],
group2 = ".",
part_1[, -2]
)
part_2_c <- cbind(
group1 = ".",
group2 = part_2[, 2],
part_2[, -2]
)
m1_pairs_c <- rbind(part_1_c, part_2_c)
colnames(m1_pairs_c)[1:2] <- c(names(part_1)[2], names(part_2)[2])
return(m1_pairs_c)
}
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each") |>
summary(infer = TRUE)
m1_pairs
if(is.list(m1_pairs)){
m1_pairs <- combine_contrasts(m1_pairs)
}
if(is.data.frame(m1_pairs) == TRUE){
gg_pairs <- data.table(m1_pairs)
}else{
gg_pairs <- summary(m1_pairs) %>%
data.table()
}
gg_pairs
---
title: "ggptm"
if(is.data.frame(m1_pairs) == TRUE){
gg_pairs <- data.table(m1_pairs)
}else{
gg_pairs <- summary(m1_pairs) %>%
data.table()
}
---
title: "ggptm"
get_ptm_parameters <- function(m1, m1_pairs){
ptm <- list()
ptm$response_label <- find_response(m1)
predictors <- find_predictors(m1)
predictors_fixed <- predictors$conditional
ptm$factor1_label <- predictors_fixed[1]
ptm$factor2_label <- predictors_fixed[2]
ptm$two_factors <- ifelse(is.na(ptm$factor2_label), FALSE, TRUE)
random <- find_random(m1)$random
ptm$random <- ifelse(is.null(random), NA, random)
# nesting or blocked?
gg_data <- get_data(m1) |>
data.table()
if(is.na(ptm$random)){
ptm$nested <- FALSE
ptm$nest_id <- NA
ptm$blocked <- FALSE
ptm$block_id <- NA
}else{
counts <- gg_data[!is.na(get(ptm$response)), .(N = .N),
by = c(ptm$factor1_label, ptm$factor2_label, ptm$random)]
ptm$nested <- ifelse(any(counts$N > 1), TRUE, FALSE) # could be block block if...
if(ptm$nest == TRUE){
ptm$nest_id <- ptm$random
}else{
ptm$blocked <- TRUE
ptm$block_id <- ptm$random
}
}
# simple effects?
if(is.list(m1_pairs) == TRUE){
ptm$simple <- TRUE
}else{
if(is.data.frame(m1_pairs) == TRUE){
gg_pairs <- data.table(m1_pairs)
}else{
gg_pairs <- summary(m1_pairs) %>%
data.table()
}
ptm$simple <- ifelse(names(gg_pairs)[1] != "contrast", TRUE, FALSE)
}
return(ptm)
}
create_pairs_data <- function(m1_pairs, ptm){
if(is.list(m1_pairs)){
m1_pairs <- combine_contrasts(m1_pairs)
ptm$simple <- TRUE
}
if(is.data.frame(m1_pairs) == TRUE){
gg_pairs <- data.table(m1_pairs)
}else{
gg_pairs <- summary(m1_pairs) %>%
data.table()
}
# is the contrast a difference or ratio?
contrast_is <- "difference"
if("ratio" %in% names(gg_pairs)){
contrast_is <- "ratio"
}
# create group1 and group2 columns (the two groups of contrast)
if(contrast_is == "difference"){
groups <- unlist(str_split(gg_pairs$contrast, " - "))
}
if(contrast_is == "ratio"){
groups <- unlist(str_split(gg_pairs$contrast, " / "))
}
groups <- lapply(groups, remove_parentheses) |>
unlist()
i_seq <- 1:length(groups)
gg_pairs[, group1_label := groups[i_seq%%2 != 0]]
gg_pairs[, group2_label := groups[i_seq%%2 == 0]]
if(ptm$simple == TRUE){ # works w both pairwise and revpairwise
simple_group_1 <- names(gg_pairs)[1]
simple_group_2 <- names(gg_pairs)[2]
gg_pairs[get(simple_group_1) != ".", group1_label := paste(group1_label, get(simple_group_1))]
gg_pairs[get(simple_group_1) != ".", group2_label := paste(group2_label, get(simple_group_1))]
gg_pairs[get(simple_group_2) != ".", group1_label := paste(get(simple_group_2), group1_label)]
gg_pairs[get(simple_group_2) != ".", group2_label := paste(get(simple_group_2), group2_label)]
}
if(ptm$two_factors == TRUE){
gg_pairs[, group1_label := str_replace(group1_label, " ", "\n")]
gg_pairs[, group2_label := str_replace(group2_label, " ", "\n")]
}
gg_pairs[, group1 := match(group1_label, ptm$plot_factor_levels)]
gg_pairs[, group2 := match(group2_label, ptm$plot_factor_levels)]
gg_pairs[, p.print := pretty_pvalues(p.value)]
gg_pairs[, p.print := format_p(p.value, whitespace = FALSE)]
return(gg_pairs)
}
get_ptm_parameters <- function(m1, m1_pairs){
ptm <- list()
ptm$response_label <- find_response(m1)
predictors <- find_predictors(m1)
predictors_fixed <- predictors$conditional
ptm$factor1_label <- predictors_fixed[1]
ptm$factor2_label <- predictors_fixed[2]
ptm$two_factors <- ifelse(is.na(ptm$factor2_label), FALSE, TRUE)
random <- find_random(m1)$random
ptm$random <- ifelse(is.null(random), NA, random)
# nesting or blocked?
gg_data <- get_data(m1) |>
data.table()
if(is.na(ptm$random)){
ptm$nested <- FALSE
ptm$nest_id <- NA
ptm$blocked <- FALSE
ptm$block_id <- NA
}else{
counts <- gg_data[!is.na(get(ptm$response)), .(N = .N),
by = c(ptm$factor1_label, ptm$factor2_label, ptm$random)]
ptm$nested <- ifelse(any(counts$N > 1), TRUE, FALSE) # could be block block if...
if(ptm$nest == TRUE){
ptm$nest_id <- ptm$random
}else{
ptm$blocked <- TRUE
ptm$block_id <- ptm$random
}
}
# simple effects?
if(is.data.frame(m1_pairs) == TRUE){
gg_pairs <- data.table(m1_pairs)
}else{
gg_pairs <- summary(m1_pairs) %>%
data.table()
}
ptm$simple <- ifelse(names(gg_pairs)[1] != "contrast", TRUE, FALSE)
return(ptm)
}
create_pairs_data <- function(m1_pairs, ptm){
if(is.data.frame(m1_pairs) == TRUE){
gg_pairs <- data.table(m1_pairs)
}else{
gg_pairs <- summary(m1_pairs) %>%
data.table()
}
# is the contrast a difference or ratio?
contrast_is <- "difference"
if("ratio" %in% names(gg_pairs)){
contrast_is <- "ratio"
}
# create group1 and group2 columns (the two groups of contrast)
if(contrast_is == "difference"){
groups <- unlist(str_split(gg_pairs$contrast, " - "))
}
if(contrast_is == "ratio"){
groups <- unlist(str_split(gg_pairs$contrast, " / "))
}
groups <- lapply(groups, remove_parentheses) |>
unlist()
i_seq <- 1:length(groups)
gg_pairs[, group1_label := groups[i_seq%%2 != 0]]
gg_pairs[, group2_label := groups[i_seq%%2 == 0]]
if(ptm$simple == TRUE){ # works w both pairwise and revpairwise
simple_group_1 <- names(gg_pairs)[1]
simple_group_2 <- names(gg_pairs)[2]
gg_pairs[get(simple_group_1) != ".", group1_label := paste(group1_label, get(simple_group_1))]
gg_pairs[get(simple_group_1) != ".", group2_label := paste(group2_label, get(simple_group_1))]
gg_pairs[get(simple_group_2) != ".", group1_label := paste(get(simple_group_2), group1_label)]
gg_pairs[get(simple_group_2) != ".", group2_label := paste(get(simple_group_2), group2_label)]
}
if(ptm$two_factors == TRUE){
gg_pairs[, group1_label := str_replace(group1_label, " ", "\n")]
gg_pairs[, group2_label := str_replace(group2_label, " ", "\n")]
}
gg_pairs[, group1 := match(group1_label, ptm$plot_factor_levels)]
gg_pairs[, group2 := match(group2_label, ptm$plot_factor_levels)]
gg_pairs[, p.print := pretty_pvalues(p.value)]
gg_pairs[, p.print := format_p(p.value, whitespace = FALSE)]
return(gg_pairs)
}
m1_pairs
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each") |>
summary(infer = TRUE)
if(is.list(m1_pairs)){
m1_pairs <- combine_contrasts(m1_pairs)
}
ptm <- get_ptm_parameters(m1, m1_pairs)
ptm$show_nest <- show_nest_data
if(!is.na(nest_id)){ptm$nest_id <- nest_id}
if(is.na(y_label)){y_label <- ptm$response_label}
gg_data <- create_plot_data(m1, ptm)
gg_emm <- create_emm_data(m1_emm, ptm)
ptm$plot_factor_levels <- gg_emm[, plot_factor] |> as.character()
gg_pairs <- create_pairs_data(m1_pairs, ptm)
if(!is.na(nest_id)){
gg_nest <- create_nest_data(m1, gg_data, ptm)
}else{
gg_nest <- NA
}
gg_pairs <- add_y_pos(gg_pairs, gg_data, gg_emm, gg_nest, ptm)
gg <- ggplot(data = gg_data,
aes(x = plot_factor_id,
y = y))
# add nested data
if(ptm$nested == TRUE){
# nested reps
if(show_nest_data == TRUE){
gg <- gg +
geom_sina(data = gg_data,
aes(x = plot_factor_id,
y = y,
alpha = 1),
scale = "width",
maxwidth = jitter_width,
size = 2,
color = "gray",
show.legend = FALSE)
}
}
# join blocks
if(ptm$blocked == TRUE & join_blocks == TRUE){
gg <- gg +
geom_line(data = gg_data,
aes(x = plot_factor_id,
y = y,
group = get(ptm$block_id)),
color = "grey"
)
}
if(ptm$nested == FALSE){
# experimental reps
gg <- gg +
geom_jitter(data = gg_data,
aes(x = plot_factor_id,
y = y,
color = factor_1),
width = jitter_width,
size = 4,
show.legend = FALSE)
}
# add nest means = experimental reps
if(ptm$nested == TRUE){
gg <- gg +
geom_jitter(data = gg_nest,
aes(x = plot_factor_id,
y = nest_mean,
color = factor_1),
width = jitter_width,
size = 4,
show.legend = FALSE)
}
# add model means and CI
gg <- gg +
geom_errorbar(data = gg_emm,
aes(x = plot_factor_id,
y = mean,
ymin = lo,
ymax = hi,
width =.1),
show.legend = FALSE) +
geom_point(data = gg_emm,
aes(x = plot_factor_id,
y = mean),
size = 4,
show.legend = FALSE)
# add some color
if(palette != "pal_ggplot"){
gg <- gg +
scale_color_manual(values = get(palette))
}
gg
knitr::purl("ggptm.Rmd")
jmvtools::install()
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each",
combine = "TRUE") |>
summary(infer = TRUE)
is.list(m1_pairs)
m1_pairs
names(list)
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each") |>
summary(infer = TRUE)
names(list)
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each",
combine = "TRUE") |>
summary(infer = TRUE)
m1_pairs[[1]]
m2_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each") |>
summary(infer = TRUE)
m1_pairs
m2_pairs
m4 <- lmer(csa ~ treatment, data = fake_data)
m4 <- lm(csa ~ treatment, data = fake_data)
m4_emm <- emmeans(m4, specs = c("surgery", "genotype"))
m4 <- lm(csa ~ treatment, data = fake_data)
m4_emm <- emmeans(m4, specs = c("treatment"))
m4_pairs <- contrast(m4_emm,
method = "revpairwise") |>
summary(infer = TRUE)
m4_pairs
m1_pairs[[1]]
m2_pairs[[1]]
m4_pairs[[1]]
names(m4_pairs[[1]])
names(m1_pairs[[1]])
names(m2_pairs[[1]])
knitr::purl("ggptm.Rmd")
jmvtools::install()
knitr::purl("ggptm.Rmd")
jmvtools::install()
jmvtools::install()
