if(any(is.na(x_axis_labels)) == TRUE){x_axis_labels <- levels(gg_data$plot_factor)}
# rescale
gg_data[, y := y / rescale]
gg_emm[, mean := mean / rescale]
gg_emm[, lo := lo / rescale]
gg_emm[, hi := hi / rescale]
gg_pairs[, y_pos := y_pos / rescale]
if(!is.na(gg_nest)){
gg_nest[, nest_mean := nest_mean / rescale]
}
gg <- ggplot(data = gg_data,
aes(x = plot_factor_id,
y = y))
# add nested data
if(ptm$nested == TRUE){
# nested reps
if(show_nest_data == TRUE){
gg <- gg +
geom_sina(data = gg_data,
aes(x = plot_factor_id,
y = y,
alpha = 1),
scale = "width",
maxwidth = jitter_width,
size = 2,
color = "gray",
show.legend = FALSE)
}
}
# join blocks
if(ptm$blocked == TRUE & join_blocks == TRUE){
gg <- gg +
geom_line(data = gg_data,
aes(x = plot_factor_id,
y = y,
group = get(ptm$block_id)),
color = "grey"
)
}
if(ptm$nested == FALSE){
# experimental reps
gg <- gg +
geom_jitter(data = gg_data,
aes(x = plot_factor_id,
y = y,
color = factor_1),
width = jitter_width,
size = 4,
show.legend = FALSE)
}
# add nest means = experimental reps
if(ptm$nested == TRUE){
gg <- gg +
geom_jitter(data = gg_nest,
aes(x = plot_factor_id,
y = nest_mean,
color = factor_1),
width = jitter_width,
size = 4,
show.legend = FALSE)
}
# add model means and CI
gg <- gg +
geom_errorbar(data = gg_emm,
aes(x = plot_factor_id,
y = mean,
ymin = lo,
ymax = hi,
width =.1),
show.legend = FALSE) +
geom_point(data = gg_emm,
aes(x = plot_factor_id,
y = mean),
size = 4,
show.legend = FALSE)
# add some color
if(palette != "pal_ggplot"){
gg <- gg +
scale_color_manual(values = get(palette))
}
# add p-value brackets
gg <- gg +
stat_pvalue_manual(gg_pairs,
label = "p.print",
y.position = "y_pos",
# xmin = "minx",
# xmax = "maxx",
size = 4,
tip.length = 0.01)
# add y-axis label
if(rescale != 1){
if(rescale > 1000){
rescale_str <- sci_to_10(rescale)
}else{
rescale_str <- as.character(rescale)
}
if(is.na(y_units)){
y_units <- paste0("X", rescale_str)
}else{
y_units <- paste0("X", rescale_str, " ", y_units)
}
}
y_label <- str_replace(y_label, " ", "~")
y_units <- str_replace(y_units, " ", "~")
if(is.na(y_units)){
gg <- gg +
ylab(bquote(.(rlang::parse_expr(paste(y_label)))))
}else{
gg <- gg +
ylab(bquote(.(rlang::parse_expr(paste(y_label)))
~(.(rlang::parse_expr(paste(y_units))))))
}
# x-axis tick labels
gg <- gg + scale_x_discrete(labels = x_axis_labels)
# add theme
gg <- gg + theme_pubr() +
theme(axis.title.x = element_blank())
# gg
return(gg)
}
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = c(3,4),
y_label = "CSA",
y_units = "mm^2",
rescale = 100000)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = c(3,4),
y_label = "CSA",
y_units = "mm^2",
rescale = 10^6)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = c(3,4),
y_label = "CSA",
y_units = "mm^2",
rescale = 1000)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = c(3,4),
y_label = "CSA",
y_units = "mm^2",
rescale = 10000)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = c(3,4),
y_label = "CSA",
y_units = "mm^2",
rescale = 1000000)
knitr::purl("ggptm.Rmd")
jmvtools::install()
seed <- 1
# sigma_e^2 = sigma_rep^2 + sigma_ss^2
# icc = sigma_rep^2 / sigma_e^2
icc <- 0.6
sigma_e <- 400
sigma_rep <- sqrt(icc*sigma_e^2)
sigma_ss <- sqrt(sigma_e^2 - sigma_rep^2)
fake_data <- simulator(
seed_i = seed,
n_sim = 1,
n_treat = 4, # number of treatment levels
n_block = 8, # number of litters (blocks)
n_rep = 1, # number of mice per litter:treatment
n_ss = 1, # number of subsamples
n_exp = 1, # number of experiments
design = "rcbd",
correlated_slopes = FALSE, # TRUE uses random int/slope model to generate data
beta = c(2400, -800, -700, -1200),
sigma_exp.block = sigma_rep, # sd among exp:block (or block if n_exp = 1). This is among mouse
sigma_exp.block.treat = 100, # sd among exp:block:treat
sigma_ss = sigma_ss, # sd among subsamples within replication of treatment:block
block_name = "litter",
rep_name = "mouse",
ss_name = "ss"
)
setnames(fake_data, c("treatment", "sim_1"), c("fake_treatment", "csa")) # cross-sectional area
fake_data[fake_treatment == "Cn", treatment := "Intact LONP1"]
fake_data[fake_treatment == "Tr1", treatment := "Denerv LONP1"]
fake_data[fake_treatment == "Tr2", treatment := "Intact mKO"]
fake_data[fake_treatment == "Tr3", treatment := "Denerv mKO"]
fake_data[, c("surgery", "genotype") := tstrsplit(treatment, " ")]
m1 <- lmer(csa ~ surgery * genotype + (1 | litter), data = fake_data)
m1_emm <- emmeans(m1, specs = c("surgery", "genotype"))
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each",
combine = "TRUE") |>
summary(infer = TRUE)
m2_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each") |>
summary(infer = TRUE)
m3_pairs <- contrast(m1_emm,
method = "pairwise",
simple = "each",
combine = "TRUE") |>
summary(infer = TRUE)
m4 <- lm(csa ~ treatment, data = fake_data)
m4_emm <- emmeans(m4, specs = c("treatment"))
m4_pairs <- contrast(m4_emm,
method = "revpairwise") |>
summary(infer = TRUE)
ggplot_the_response(m1, m1_emm, m1_pairs)
m1 <- aov_4(csa ~ surgery * genotype + (surgery * genotype | litter), data = fake_data)
m1_emm <- emmeans(m1, specs = c("surgery", "genotype"))
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each",
combine = "TRUE") |>
summary(infer = TRUE)
m1_pairs
m1 <- lmer(csa ~ surgery * genotype + (1 | litter), data = fake_data)
m1_emm <- emmeans(m1, specs = c("surgery", "genotype"))
m1_pairs <- contrast(m1_emm,
method = "revpairwise",
simple = "each",
combine = "TRUE",
adjust = "none") |>
summary(infer = TRUE)
anova(m1)
car::Anova(m1, type = "3")
m1_pairs
anova(m1)
car::Anova(m1, type = "3", test="F")
m1b_emm <- emmeans(m1, ~ surgery | genotype)
m1_emm <- emmeans(m1, specs = c("surgery", "genotype"))
m1_emm <- emmeans(m1, specs = c("surgery", "genotype"))
m1_emm
m1b_emm
m1_emm
m1b_pairs <- contrast(m1b_emm,
method = "pairwise",
simple = "each",
combine = "TRUE",
adjust = "none") |>
summary(infer = TRUE)
m1_pairs
m1b_pairs
m1_emm
m1b_emm
theme_pubr
plot_response <- function(m1,
m1_emm,
m1_pairs,
hide_pairs = NA, # rows of m1_pairs to hide
rescale = 1,
join_blocks = FALSE,
show_nest_data = FALSE,
block_id = NA, # this is the column containing the blocks
nest_id = NA, # this is the column containing the cluster
jitter_spread = 0.8,
jitter_width = 0.2,
palette = "pal_ggplot",
y_label = NA,
y_units = NA,
x_axis_labels = NA,
font_size = 12
){
# correct m1_pairs if its a list
if(!is.null(names(m1_pairs[[1]]))){
m1_pairs <- combine_contrasts(m1_pairs)
}
ptm <- get_ptm_parameters(m1, m1_pairs)
ptm$show_nest <- show_nest_data
if(!is.na(nest_id)){ptm$nest_id <- nest_id}
if(is.na(y_label)){y_label <- ptm$response_label}
gg_data <- create_plot_data(m1, ptm)
gg_emm <- create_emm_data(m1_emm, ptm)
ptm$plot_factor_levels <- gg_emm[, plot_factor] |> as.character()
gg_pairs <- create_pairs_data(m1_pairs, hide_pairs, ptm)
if(!is.na(nest_id)){
gg_nest <- create_nest_data(m1, gg_data, ptm)
}else{
gg_nest <- NA
}
gg_pairs <- add_y_pos(gg_pairs, gg_data, gg_emm, gg_nest, ptm)
if(any(is.na(x_axis_labels)) == TRUE){x_axis_labels <- levels(gg_data$plot_factor)}
# rescale
gg_data[, y := y / rescale]
gg_emm[, mean := mean / rescale]
gg_emm[, lo := lo / rescale]
gg_emm[, hi := hi / rescale]
gg_pairs[, y_pos := y_pos / rescale]
if(!is.na(gg_nest)){
gg_nest[, nest_mean := nest_mean / rescale]
}
gg <- ggplot(data = gg_data,
aes(x = plot_factor_id,
y = y))
# add nested data
if(ptm$nested == TRUE){
# nested reps
if(show_nest_data == TRUE){
gg <- gg +
geom_sina(data = gg_data,
aes(x = plot_factor_id,
y = y,
alpha = 1),
scale = "width",
maxwidth = jitter_width,
size = 2,
color = "gray",
show.legend = FALSE)
}
}
# join blocks
if(ptm$blocked == TRUE & join_blocks == TRUE){
gg <- gg +
geom_line(data = gg_data,
aes(x = plot_factor_id,
y = y,
group = get(ptm$block_id)),
color = "grey"
)
}
if(ptm$nested == FALSE){
# experimental reps
gg <- gg +
geom_jitter(data = gg_data,
aes(x = plot_factor_id,
y = y,
color = factor_1),
width = jitter_width,
size = 4,
show.legend = FALSE)
}
# add nest means = experimental reps
if(ptm$nested == TRUE){
gg <- gg +
geom_jitter(data = gg_nest,
aes(x = plot_factor_id,
y = nest_mean,
color = factor_1),
width = jitter_width,
size = 4,
show.legend = FALSE)
}
# add model means and CI
gg <- gg +
geom_errorbar(data = gg_emm,
aes(x = plot_factor_id,
y = mean,
ymin = lo,
ymax = hi,
width =.1),
show.legend = FALSE) +
geom_point(data = gg_emm,
aes(x = plot_factor_id,
y = mean),
size = 4,
show.legend = FALSE)
# add some color
if(palette != "pal_ggplot"){
gg <- gg +
scale_color_manual(values = get(palette))
}
# add p-value brackets
gg <- gg +
stat_pvalue_manual(gg_pairs,
label = "p.print",
y.position = "y_pos",
# xmin = "minx",
# xmax = "maxx",
size = 4,
tip.length = 0.01)
# add y-axis label
if(rescale != 1){
if(rescale > 1000){
rescale_str <- sci_to_10(rescale)
}else{
rescale_str <- as.character(rescale)
}
if(is.na(y_units)){
y_units <- paste0("X", rescale_str)
}else{
y_units <- paste0("X", rescale_str, " ", y_units)
}
}
y_label <- str_replace(y_label, " ", "~")
y_units <- str_replace(y_units, " ", "~")
if(is.na(y_units)){
gg <- gg +
ylab(bquote(.(rlang::parse_expr(paste(y_label)))))
}else{
gg <- gg +
ylab(bquote(.(rlang::parse_expr(paste(y_label)))
~(.(rlang::parse_expr(paste(y_units))))))
}
# x-axis tick labels
gg <- gg + scale_x_discrete(labels = x_axis_labels)
# add theme
gg <- gg + theme_pubr(base_size = font_size) +
theme(axis.title.x = element_blank())
# gg
return(gg)
}
ggplot_the_response(m1, m1_emm, m1_pairs)
# the analysis only comparing the families of tests that we care about
veh = c(1, 0, 0, 0)
dex = c(0, 1, 0, 0)
dex_cc = c(0, 0, 1, 0) # note the wonky ordering in fig 7d
cc = c(0,0,0,1)
focal_contrasts = list(
"DEX - Vehicle" = dex - veh,
"CC - Vehicle" = cc - veh,
"DEX+CC - DEX" = dex_cc - dex,
"interaction" = (dex_cc - dex) - (cc - veh)
)
m1 <- glm.nb(Fbxo32 ~ treatment, data = fig7d)
m1_emm <- emmeans(m1, specs = "treatment", type = "response")
m1_pairs <- contrast(m1_emm,
method = focal_contrasts) |>
summary(infer = TRUE)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = 4,
rescale = 10^6)
m1 <- lm(Fbxo32 ~ treatment, data = fig7d)
m1_emm <- emmeans(m1, specs = "treatment")
m1_pairs <- contrast(m1_emm,
method = "revpairwise") |>
summary(infer = TRUE)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = c(3,4),
y_label = "CSA",
y_units = "mm^2",
rescale = 1000000)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = c(3,4),
y_label = "CSA",
y_units = "mm^2",
rescale = 1000000,
font_size = 16)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = c(3,4),
y_label = "CSA",
y_units = "mm^2",
rescale = 1000000,
font_size = 24)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = c(3,4),
y_label = "CSA",
y_units = "mm^2",
rescale = 1000000,
font_size = 10)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = c(3,4),
y_label = "CSA",
y_units = "mm^2",
rescale = 1000000,
font_size = 12)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = c(3,4),
y_label = "CSA",
y_units = "mm^2",
rescale = 1000000,
font_size = 16)
plot_response(m1,
m1_emm,
m1_pairs,
hide_pairs = c(3,4),
y_label = "CSA",
y_units = "mm^2",
rescale = 1000000,
font_size = 14)
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
knitr::purl("ggptm.Rmd")
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
jmvtools::install()
